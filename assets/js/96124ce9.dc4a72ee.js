(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{94:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return r})),i.d(n,"metadata",(function(){return l})),i.d(n,"toc",(function(){return s})),i.d(n,"default",(function(){return u}));var t=i(3),o=i(8),a=(i(0),i(121)),r={title:"BuildZri Introduction"},l={unversionedId:"buildzri/intro",id:"buildzri/intro",isDocsHomePage:!1,title:"BuildZri Introduction",description:"`",source:"@site/docs/buildzri/intro.md",slug:"/buildzri/intro",permalink:"/docs/buildzri/intro",editUrl:"https://github.com/codezri/codezri.github.io/edit/master/docs/buildzri/intro.md",version:"current",sidebar:"docs",previous:{title:"How to Use",permalink:"/docs/releasezri/integrate"},next:{title:"How to Use",permalink:"/docs/buildzri/integrate"}},s=[{value:"Features",id:"features",children:[]},{value:"Sample configuration",id:"sample-configuration",children:[]}],c={toc:s};function u(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},c,i,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"  ____        _ _     _ ______     _\n |  _ \\      (_) |   | |___  /    (_)\n | |_) |_   _ _| | __| |  / / _ __ _\n |  _ <| | | | | |/ _` | / / | '__| |\n | |_) | |_| | | | (_| |/ /__| |  | |\n |____/ \\__,_|_|_|\\__,_/_____|_|  |_|\n\n BuildZri - A minimal build automation tool for C++\n")),Object(a.b)("p",null,"Most C++ build automation tools come with a bit complex syntax and make simple projects complex.\nAs a result, C++ programmers often try to write shell scripts for compilation, but then they have to maintain\nmultiple scripts for each platform."),Object(a.b)("p",null,"BuildZri is a minimal cross-platform C++ build automation tool written in Python. It comes with a simple\nJSON-based configuration file with the features you need. It provides a minimal and flexible abstraction over the\nstandard compiler command-line interface, so you can integrate BuildZri in seconds while having the freedom\nto configure the compiler."),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://github.com/codezri/buildzri"},"Source code")),Object(a.b)("h2",{id:"features"},"Features"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Minimal JSON-based configuration with global variables"),Object(a.b)("li",{parentName:"ul"},"Supports, GNU C++, Clang, and MSVC compilers"),Object(a.b)("li",{parentName:"ul"},"Written in Python, works on any popular operating system"),Object(a.b)("li",{parentName:"ul"},"Built for both developers and CI/CD servers"),Object(a.b)("li",{parentName:"ul"},"No installation required, it comes as a simple script")),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://neutralino.js.org"},"Neutralinojs")," uses BuildZri to build binaries on Linux, macOS, and Windows."),Object(a.b)("h2",{id:"sample-configuration"},"Sample configuration"),Object(a.b)("p",null,"See how simple to generate cross-platform binaries with BuildZri:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "std": "c++17",\n    "name": "BuildZri Sample",\n    "version": "1.0.1",\n    "output": "./bin/bzsample-${BZ_OS}_${BZ_ARCH}",\n    "include": {\n        "*": [\n            "."\n        ]\n    },\n    "source": {\n        "*": [\n            "*.cpp",\n            "add/*.cpp",\n            "subtract/*.cpp"\n        ],\n        "linux": [\n            "platform/linux.cpp"\n        ]\n    },\n    "definitions": {\n        "*": [\n            "BZ_TESTV=1",\n            "BZ_PROJ_VERSION=\\\\\\"${BZ_VERSION}\\\\\\""\n        ]\n    },\n    "options": {\n        "linux": [\n            "-Os"\n        ],\n        "darwin": [\n            "-Os"\n        ],\n        "windows": [\n            "/EHsc",\n            "/Os",\n            "/link"\n        ]\n    }\n}\n')),Object(a.b)("p",null,"The above sample configuration generates the following binaries:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"./bin/bzsample-linux_x64")," on x64 GNU/Linux machines"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"./bin/bzsample-mac_x64")," on x64/arm64 macOS machines"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"./bin/bzsample-win_x64.exe")," on x64 Windows machines")))}u.isMDXComponent=!0}}]);