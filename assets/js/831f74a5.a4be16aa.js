(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return f})),n.d(t,"metadata",(function(){return h})),n.d(t,"toc",(function(){return g})),n.d(t,"default",(function(){return O}));var i=n(3),a=n(0),o=n.n(a),r=n(122),l=n(133),c=n(118),s=n(93),u=n.n(s);const d=37,b=39;var p=function(e){const{lazy:t,block:n,defaultValue:i,values:r,groupId:s,className:p}=e,{tabGroupChoices:m,setTabGroupChoices:f}=Object(l.a)(),[h,g]=Object(a.useState)(i),j=a.Children.toArray(e.children),O=[];if(null!=s){const e=m[s];null!=e&&e!==h&&r.some((t=>t.value===e))&&g(e)}const v=e=>{const t=e.target,n=O.indexOf(t),i=j[n].props.value;g(i),null!=s&&(f(s,i),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:i,right:a}=e.getBoundingClientRect(),{innerHeight:o,innerWidth:r}=window;return t>=0&&a<=r&&i<=o&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(u.a.tabItemActive),setTimeout((()=>t.classList.remove(u.a.tabItemActive)),2e3))}),150))},y=e=>{var t;let n;switch(e.keyCode){case b:{const t=O.indexOf(e.target)+1;n=O[t]||O[0];break}case d:{const t=O.indexOf(e.target)-1;n=O[t]||O[O.length-1];break}}null===(t=n)||void 0===t||t.focus()};return o.a.createElement("div",{className:"tabs-container"},o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},p)},r.map((e=>{let{value:t,label:n}=e;return o.a.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:Object(c.a)("tabs__item",u.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:e=>O.push(e),onKeyDown:y,onFocus:v,onClick:v},n)}))),t?Object(a.cloneElement)(j.filter((e=>e.props.value===h))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},j.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==h})))))};var m=function(e){let{children:t,hidden:n,className:i}=e;return o.a.createElement("div",{role:"tabpanel",hidden:n,className:i},t)};const f={title:"How to Use"},h={unversionedId:"buildzri/integrate",id:"buildzri/integrate",isDocsHomePage:!1,title:"How to Use",description:"Add BuildZri to your C++ project with the following steps.",source:"@site/docs/buildzri/integrate.mdx",slug:"/buildzri/integrate",permalink:"/docs/buildzri/integrate",editUrl:"https://github.com/codezri/codezri.github.io/edit/master/docs/buildzri/integrate.mdx",version:"current",sidebar:"docs",previous:{title:"BuildZri Introduction",permalink:"/docs/buildzri/intro"},next:{title:"Reference",permalink:"/docs/buildzri/reference"}},g=[{value:"Add the BuildZri script",id:"add-the-buildzri-script",children:[]},{value:"Create the configuration file",id:"create-the-configuration-file",children:[]},{value:"Start building binaries",id:"start-building-binaries",children:[]}],j={toc:g};function O(e){let{components:t,...n}=e;return Object(r.b)("wrapper",Object(i.a)({},j,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Add BuildZri to your C++ project with the following steps."),Object(r.b)("h2",{id:"add-the-buildzri-script"},"Add the BuildZri script"),Object(r.b)("p",null,"BuildZri comes as a Python v3 script that you can execute on GNU/Linux, macOS, and Windows. Copy-paste\n",Object(r.b)("a",{parentName:"p",href:"https://github.com/codezri/buildzri/blob/main/scripts/bz.py"},Object(r.b)("inlineCode",{parentName:"a"},"scripts/bz.py"))," into your ",Object(r.b)("inlineCode",{parentName:"p"},"scripts")," directory.\nNext, add required execution permissions on Unix or Unix-like platforms."),Object(r.b)("h2",{id:"create-the-configuration-file"},"Create the configuration file"),Object(r.b)("p",null,"Create the ",Object(r.b)("inlineCode",{parentName:"p"},"buildzri.config.json")," file for your project according to the ",Object(r.b)("a",{parentName:"p",href:"/docs/buildzri/reference"},"reference"),". Look at\nthe following minimal C++ project."),Object(r.b)(p,{defaultValue:"buildzri.config.json",values:[{label:"buildzri.config.json",value:"buildzri.config.json"},{label:"main.cpp",value:"main.cpp"}],mdxType:"Tabs"},Object(r.b)(m,{value:"buildzri.config.json",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "std": "c++17",\n  "name": "BuildZri Sample",\n  "version": "1.0.1",\n  "output": "./bin/bzsample-${BZ_OS}_${BZ_ARCH}",\n  "source": {\n      "*": [\n          "main.cpp"\n      ],\n  },\n  "definitions": {\n      "*": [\n          "BZ_PROJ_VERSION=\\\\\\"${BZ_VERSION}\\\\\\""\n      ]\n  }\n}\n'))),Object(r.b)(m,{value:"main.cpp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nusing namespace std;\n\nint main() {\n  cout << "Hello BuildZri" << endl;\n  #if defined(BZ_PROJ_VERSION)\n      cout << "v" << BZ_PROJ_VERSION << endl;\n  #endif\n}\n')))),Object(r.b)("p",null,"The above project consists of one C++ source file, but you can add multiple source files easily with the\nwildcard syntax. As show above, you can configure BuildZri to automatically set version details via a macro\ndefinition."),Object(r.b)("p",null,"Inspect the build configuration file of the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/neutralinojs/neutralinojs/blob/main/buildzri.config.json"},"Neutralinojs"),"\nframework to learn how to integrate BuildZri for medium-scale projects."),Object(r.b)("h2",{id:"start-building-binaries"},"Start building binaries"),Object(r.b)("p",null,"After configuring your project, run the ",Object(r.b)("inlineCode",{parentName:"p"},"bz.py")," script file to start the compilation process. For example,\non Unix or Unix-like platforms, you can use the following command:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/bz.py\n")),Object(r.b)("p",null,"The compilation warnings and error messages will appear on the terminal as usual. Also, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"--verbose"),"\nflag to identify pre-compilation issues. The BuildZri tool is built for both developers and CI/CD environments,\nso you can use the same build command on GitHub Actions, as shown below:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},"- name: Build\n  run: ./scripts/bz.py\n")))}O.isMDXComponent=!0}}]);