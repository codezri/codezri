(self.webpackChunkcodezri=self.webpackChunkcodezri||[]).push([[282],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3381:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),l={title:"ReleaseZri"},i={unversionedId:"releasezri",id:"releasezri",isDocsHomePage:!1,title:"ReleaseZri",description:"Meaningful and minimalist release notes for developers",source:"@site/docs/releasezri.md",sourceDirName:".",slug:"/releasezri",permalink:"/docs/releasezri",editUrl:"https://github.com/codezri/codezri.github.io/edit/master/docs/releasezri.md",version:"current",frontMatter:{title:"ReleaseZri"},sidebar:"tutorialSidebar",previous:{title:"Index",permalink:"/docs/"}},s=[{value:"Highlighted features",id:"highlighted-features",children:[]},{value:"Create a changelog",id:"create-a-changelog",children:[]},{value:"Create a release note template",id:"create-a-release-note-template",children:[{value:"Supported template variables",id:"supported-template-variables",children:[]}]},{value:"Add the release note generation script",id:"add-the-release-note-generation-script",children:[]},{value:"Update your DevOps workflow",id:"update-your-devops-workflow",children:[]}],p={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Meaningful and minimalist release notes for developers"),(0,o.kt)("p",null,"Managing manual release notes is hard. Therefore, everyone tends to generate release notes\nfrom commit messages. But, you won't get a meaningful release note at the end. ReleaseZri offers\nyou a simple strategy to maintain a human-friendly changelog and generate release notes automatically.\nIt also gives you a GitHub Action workflow steps that you can simply copy-paste into your projects."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/codezri/releasezri"},"Source code")),(0,o.kt)("h2",{id:"highlighted-features"},"Highlighted features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Generate release notes and update changelog with one command."),(0,o.kt)("li",{parentName:"ul"},"You don't need to follow a specific commit message format."),(0,o.kt)("li",{parentName:"ul"},"Structure your changelog with a simple format, write content with your own rules."),(0,o.kt)("li",{parentName:"ul"},"Get release notes as a markdown file, use whereever you need."),(0,o.kt)("li",{parentName:"ul"},"Flexible release note template."),(0,o.kt)("li",{parentName:"ul"},"Written in Python, works on any platform.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://neutralino.js.org"},"Neutralinojs")," uses ReleaseZri to maintain their release notes.\nAdd ReleaseZri to your project with the following steps."),(0,o.kt)("h2",{id:"create-a-changelog"},"Create a changelog"),(0,o.kt)("p",null,"ReleaseZri doesn't extract release notes from commit messages since that approach doesn't give meaningful\nrelease notes. It extracts release notes from ",(0,o.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," file in your repository. Create changelog with\nthe following format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Changelog\n\nAdd all code changes (features, deprecations, and enhancements)\nunder the `Unreleased` topic to track changes for the next release.\n\n## Unreleased\n\n### API: window\n- `window.getTitle` returns the current native window title.\n\n## v4.0.0\n\n### API: window\n- `window.setTitle` sets the current native window title.\n")),(0,o.kt)("p",null,"There are no strict rules. You only need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"## Unreleased")," for unreleased changes and\nlevel 3 (",(0,o.kt)("inlineCode",{parentName:"p"},"###"),") or below headings for changes. You can update this changelog manually whenever you need regardless of\nwhat you commit."),(0,o.kt)("h2",{id:"create-a-release-note-template"},"Create a release note template"),(0,o.kt)("p",null,"ReleaseZri generates release notes and embeds to a template. Now add your template to ",(0,o.kt)("inlineCode",{parentName:"p"},".releasezri/template.md"),"\n, as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"## What's new\n{RZ_CHANGELOG}\nGet started with {RZ_VERSION}: https://codezri.org/docs/releasezri\n")),(0,o.kt)("h3",{id:"supported-template-variables"},"Supported template variables"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"RZ_VERSION"),": New version, Eg: ",(0,o.kt)("inlineCode",{parentName:"li"},"v3.2.0"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"RZ_CHANGELOG"),": Generated release notes markdown. Release notes is extracted from your ",(0,o.kt)("inlineCode",{parentName:"li"},"CHANGELOG.md"),".")),(0,o.kt)("h2",{id:"add-the-release-note-generation-script"},"Add the release note generation script"),(0,o.kt)("p",null,"Copy-paste ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codezri/releasezri/blob/main/scripts/rz.py"},(0,o.kt)("inlineCode",{parentName:"a"},"scripts/rz.py"))," into your project."),(0,o.kt)("h2",{id:"update-your-devops-workflow"},"Update your DevOps workflow"),(0,o.kt)("p",null,"When you run ",(0,o.kt)("inlineCode",{parentName:"p"},"rz.py create <version>"),", it will generate release notes to ",(0,o.kt)("inlineCode",{parentName:"p"},".tmprz/release_notes.md"),". Also,\nit will update ",(0,o.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," by adding the new version. You can run ",(0,o.kt)("inlineCode",{parentName:"p"},"rz.py cleanup")," to remove\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},".tmprz")," directory after using the generated release note."),(0,o.kt)("p",null,"You can use this release note generation script locally or with any DevOps pipleline. For example, see how to\nintegrate ReleaseZri with GitHub Actions."),(0,o.kt)("p",null,"Add a workflow step to create release notes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Create Release Notes\n  run: |\n    chmod +x ./scripts/rz.py\n    ./scripts/rz.py create ${{github.event.inputs.version}}\n")),(0,o.kt)("p",null,"Add another step to commit and push changelog's updates."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Commit and Push Changelog\n  uses: EndBug/add-and-commit@v7.4.0\n  with:\n    default_author: github_actions\n    message: 'Update changelog for v${{github.event.inputs.version}}'\n    add: 'CHANGELOG.md'\n    tag: v${{github.event.inputs.version}}\n")),(0,o.kt)("p",null,"Finally, publish your release with notes and artifacts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Create a GitHub release\n  uses: ncipollo/release-action@v1\n  with:\n      tag: v${{github.event.inputs.version}}\n      name: Neutralinojs v${{github.event.inputs.version}} released!\n      bodyFile: ./.tmprz/release_notes.md\n      artifacts: './bin/neutralinojs-v${{github.event.inputs.version}}.zip'\n      draft: true\n")),(0,o.kt)("p",null,"See a complete workflow\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/neutralinojs/neutralinojs/blob/main/.github/workflows/create_release.yml"},"here"),".\nThe ReleaseZri project itself maintains release notes with ReleaseZri.\nSee its workflow ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codezri/releasezri/blob/main/.github/workflows/create-release.yml"},"here"),"."))}u.isMDXComponent=!0}}]);