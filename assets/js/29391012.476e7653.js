(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{81:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return a})),i.d(n,"metadata",(function(){return r})),i.d(n,"toc",(function(){return c})),i.d(n,"default",(function(){return s}));var t=i(3),o=i(8),l=(i(0),i(121)),a={title:"Reference"},r={unversionedId:"buildzri/reference",id:"buildzri/reference",isDocsHomePage:!1,title:"Reference",description:"You can configure the BuildZri program execution via two approches: editing the configuration file or",source:"@site/docs/buildzri/reference.md",slug:"/buildzri/reference",permalink:"/docs/buildzri/reference",editUrl:"https://github.com/codezri/codezri.github.io/edit/master/docs/buildzri/reference.md",version:"current",sidebar:"docs",previous:{title:"How to Use",permalink:"/docs/buildzri/integrate"}},c=[{value:"Configuration file",id:"configuration-file",children:[{value:"<code>std: string</code>",id:"std-string",children:[]},{value:"<code>version: string</code>",id:"version-string",children:[]},{value:"<code>output: string</code>",id:"output-string",children:[]},{value:"<code>include: object</code>",id:"include-object",children:[]},{value:"<code>source: object</code>",id:"source-object",children:[]},{value:"<code>options: object</code>",id:"options-object",children:[]},{value:"<code>definitions: object</code>",id:"definitions-object",children:[]}]},{value:"Command-line arguments",id:"command-line-arguments",children:[{value:"<code>--verbose</code>",id:"--verbose",children:[]}]},{value:"Global variables",id:"global-variables",children:[{value:"<code>BZ_VERSION</code>",id:"bz_version",children:[]},{value:"<code>BZ_OS</code>",id:"bz_os",children:[]},{value:"<code>BZ_ARCHL</code>",id:"bz_archl",children:[]},{value:"<code>BZ_ARCH</code>",id:"bz_arch",children:[]}]},{value:"Cross-platform definitions",id:"cross-platform-definitions",children:[]}],b={toc:c};function s(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},b,i,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"You can configure the BuildZri program execution via two approches: editing the configuration file or\nproviding CLI arguments."),Object(l.b)("h2",{id:"configuration-file"},"Configuration file"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"buildzri.config.json")," file holds all build configurations of the particular C++ project. This file\nis mandatory to start compilation with the BuildZri tool."),Object(l.b)("h3",{id:"std-string"},Object(l.b)("inlineCode",{parentName:"h3"},"std: string")),Object(l.b)("p",null,"Defines the standard C++ version. i.e.,: ",Object(l.b)("inlineCode",{parentName:"p"},"c++17")),Object(l.b)("h3",{id:"version-string"},Object(l.b)("inlineCode",{parentName:"h3"},"version: string")),Object(l.b)("p",null,"Project version. i.e.,: ",Object(l.b)("inlineCode",{parentName:"p"},"1.0.0"),". The ",Object(l.b)("inlineCode",{parentName:"p"},"BZ_VERSION")," global variable receives this value before the compilation\nprocess. The version string won't be validated, so you use any preferred version number format."),Object(l.b)("h3",{id:"output-string"},Object(l.b)("inlineCode",{parentName:"h3"},"output: string")),Object(l.b)("p",null,"Binary file output of the C++ project. BuildZri automatically appends ",Object(l.b)("inlineCode",{parentName:"p"},".exe")," to this value on Windows."),Object(l.b)("h3",{id:"include-object"},Object(l.b)("inlineCode",{parentName:"h3"},"include: object")),Object(l.b)("p",null,"Directories to be included into the compiler execution for searching for header files."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'"include": {\n    "*": [\n        ".",\n        "lib",\n        "lib/asio/include"\n    ],\n    "windows": [\n        "lib/webview/windows"\n    ]\n}\n')),Object(l.b)("h3",{id:"source-object"},Object(l.b)("inlineCode",{parentName:"h3"},"source: object")),Object(l.b)("p",null,"Source files to be included into the compiler execution. Supports wildcard definitions with the\nPython ",Object(l.b)("a",{parentName:"p",href:"https://docs.python.org/3/library/glob.html#glob.glob"},"glob syntax"),"."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'"source": {\n    "*": [\n        "api/*/*.cpp",\n        "process.cpp",\n        "ui.cpp"\n    ],\n    "windows": [\n        "window_win.cpp"\n    ],\n    "darwin": [\n        "window_mac.mm"\n    ],\n    "linux": [\n        "window_linux.cpp",\n        "lib/linux/*.cpp"\n    ]\n}\n')),Object(l.b)("h3",{id:"options-object"},Object(l.b)("inlineCode",{parentName:"h3"},"options: object")),Object(l.b)("p",null,"Additional compiler flags for each compiler implementation. Check the following documentations to learn\nmore about compiler flags:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"GNU C/C++ compiler flags: ",Object(l.b)("a",{parentName:"li",href:"https://man7.org/linux/man-pages/man1/gcc.1.html"},"manual")),Object(l.b)("li",{parentName:"ul"},"Apple Clang LLVM compiler flags: ",Object(l.b)("a",{parentName:"li",href:"https://clang.llvm.org/docs/UsersManual.html"},"manual")),Object(l.b)("li",{parentName:"ul"},"Microsoft Visual C++ compiler flags: ",Object(l.b)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options"},"manual"))),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'"options": {\n    "windows": [\n        "/EHsc"\n    ],\n    "darwin": [\n        "-framework Cocoa"\n    ],\n    "linux": [\n        "-Os",\n        "-pipe"\n    ]\n}\n')),Object(l.b)("h3",{id:"definitions-object"},Object(l.b)("inlineCode",{parentName:"h3"},"definitions: object")),Object(l.b)("p",null,"C/C++ preprocessor macro defnitions."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'"definitions": {\n    "*": [\n        "PROGRAM_VERSION=\\\\\\"${BZ_VERSION}\\\\\\""\n    ],\n    "linux": [\n        "WEBVIEW_GTK=1",\n    ],\n    "darwin": [\n        "WEBVIEW_COCOA=1"\n    ],\n    "windows": [\n        "_HAS_STD_BYTE=0"\n    ]\n}\n')),Object(l.b)("h2",{id:"command-line-arguments"},"Command-line arguments"),Object(l.b)("p",null,"Command-line arguments help you to change the build tool execution behavior without changing the configuration\nfile."),Object(l.b)("h3",{id:"--verbose"},Object(l.b)("inlineCode",{parentName:"h3"},"--verbose")),Object(l.b)("p",null,"Prints build tool progress into the console. This CLI argument is helpful for diagnosing errors in the pre-compilation\nstages."),Object(l.b)("h2",{id:"global-variables"},"Global variables"),Object(l.b)("p",null,"Global variables can be used to change the configuration values dynamically before the compilation process.\nYou can use global variables with ",Object(l.b)("inlineCode",{parentName:"p"},"output"),", ",Object(l.b)("inlineCode",{parentName:"p"},"definitions"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"options")," configuration keys.\nGlobal variables come with the following syntax."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"${BZ_VARIABLE_NAME}\n")),Object(l.b)("p",null,"BuildZri supports the following global variables:"),Object(l.b)("h3",{id:"bz_version"},Object(l.b)("inlineCode",{parentName:"h3"},"BZ_VERSION")),Object(l.b)("p",null,"Project version from the configuration file."),Object(l.b)("h3",{id:"bz_os"},Object(l.b)("inlineCode",{parentName:"h3"},"BZ_OS")),Object(l.b)("p",null,"Operating system shortname: ",Object(l.b)("inlineCode",{parentName:"p"},"linux"),", ",Object(l.b)("inlineCode",{parentName:"p"},"mac"),", or ",Object(l.b)("inlineCode",{parentName:"p"},"win")),Object(l.b)("h3",{id:"bz_archl"},Object(l.b)("inlineCode",{parentName:"h3"},"BZ_ARCHL")),Object(l.b)("p",null,"The current machine's CPU architecture. This value is obtained with the ",Object(l.b)("inlineCode",{parentName:"p"},"platform.machine().lower()"),"\nPython code snippet."),Object(l.b)("h3",{id:"bz_arch"},Object(l.b)("inlineCode",{parentName:"h3"},"BZ_ARCH")),Object(l.b)("p",null,"Shortname of the ",Object(l.b)("inlineCode",{parentName:"p"},"BZ_ARCHL")," value. i.e.,: This variable will return ",Object(l.b)("inlineCode",{parentName:"p"},"x64")," instead of ",Object(l.b)("inlineCode",{parentName:"p"},"amd64")," or ",Object(l.b)("inlineCode",{parentName:"p"},"x86_64"),"."),Object(l.b)("h2",{id:"cross-platform-definitions"},"Cross-platform definitions"),Object(l.b)("p",null,"BuildZri is a cross-platform C/C++ build tool, so how to define configuration values for each operating system?\nCross-platform configuration objects typically accept the following properties:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"*"),": For all operating systems"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"linux"),": For GNU/Linux platforms"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"darwin"),": For macOS"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"windows"),": For Windows")),Object(l.b)("p",null,"You can define configurations for each operating system by using the above properties."),Object(l.b)("p",null,"For example, the following JSON snippet set platform-specific macros for each operating system and\nset one generic macro for all operating systems:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'"definitions": {\n    "*": [\n        "PROGRAM_VERSION=\\\\\\"${BZ_VERSION}\\\\\\""\n    ],\n    "linux": [\n        "WEBVIEW_GTK=1",\n    ],\n    "darwin": [\n        "WEBVIEW_COCOA=1"\n    ],\n    "windows": [\n        "_HAS_STD_BYTE=0"\n    ]\n}\n')),Object(l.b)("p",null,"This cross-platform definition syntax works with ",Object(l.b)("inlineCode",{parentName:"p"},"source"),", ",Object(l.b)("inlineCode",{parentName:"p"},"include"),", ",Object(l.b)("inlineCode",{parentName:"p"},"definitions"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"options")," configuration\nobjects."))}s.isMDXComponent=!0}}]);